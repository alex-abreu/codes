import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.border.*;

import javax.swing.JFormattedTextField;
import javax.swing.text.MaskFormatter;
import java.text.ParseException;


import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Arrays;

public class MedicForm {

    private JPanel medic_form;
    private JFormattedTextField crm_field;
    private JComboBox espec_combo_box;
    private JButton add_button;
    private JTextField tf_1;
    private JPasswordField pf_1;
    private JButton add_med_button;
    private JButton rmv_button;
    private JList espec_list;
    private JLabel tip_label;

    /**fields */
    private String name;
    private String cpf;
    private String rg;
    private String adress;
    private String clt;
    private String da;

    Especialidades e = new Especialidades();
    DefaultListModel d = new DefaultListModel();

    GGDash g; //manipular tabela

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        try {
            $$$setupUI$$$();
        } catch (ParseException e) {e.printStackTrace();}
                e.setEsp();
                
    }

    public MedicForm(String name, String cpf, String rg, String addrs, String clt, String da, GGDash g)
    {
        this.name = name; this.cpf = cpf; this.rg = rg; 
        this.adress = addrs; this.clt = clt; this.da = da;

        this.g = g;
    }

    public void clearFields()
    {
        tf_1.setText("");
        pf_1.setText("");
        d.clear();
        crm_field.setText("");
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() throws ParseException{
        medic_form = new JPanel();
        medic_form.setLayout(new GridBagLayout());
        medic_form.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Médico", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, -1, medic_form.getFont()), new Color(-16777216)));
        final JLabel label1 = new JLabel();
        label1.setText("CRM");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        medic_form.add(label1, gbc);
        MaskFormatter crm = new MaskFormatter("#####");
            crm.setValidCharacters("0123456789");
        crm_field = new JFormattedTextField(crm);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 4;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        medic_form.add(crm_field, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Especialidades");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.WEST;
        medic_form.add(label2, gbc);
        e.setEsp();
        espec_combo_box = new JComboBox(e.getEsp());
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 6;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        medic_form.add(espec_combo_box, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Usuario");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        medic_form.add(label3, gbc);
        tf_1 = new JTextField();
        tf_1.setColumns(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        medic_form.add(tf_1, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Senha");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        medic_form.add(label4, gbc);
        pf_1 = new JPasswordField();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        medic_form.add(pf_1, gbc);
        add_med_button = new JButton();
        add_med_button.setText("Adicionar Médico");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 10;
        gbc.gridwidth = 5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        medic_form.add(add_med_button, gbc);
        add_button = new JButton();
        add_button.setText("Adicionar");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 8;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        medic_form.add(add_button, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 0;
        gbc.gridheight = 11;
        gbc.fill = GridBagConstraints.BOTH;
        medic_form.add(scrollPane1, gbc);
        espec_list = new JList(d);
        scrollPane1.setViewportView(espec_list);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setPreferredSize(new Dimension(0, 5));
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        medic_form.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        panel2.setPreferredSize(new Dimension(0, 5));
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.BOTH;
        medic_form.add(panel2, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        panel3.setPreferredSize(new Dimension(0, 5));
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.BOTH;
        medic_form.add(panel3, gbc);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        panel4.setPreferredSize(new Dimension(0, 5));
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.BOTH;
        medic_form.add(panel4, gbc);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridBagLayout());
        panel5.setPreferredSize(new Dimension(0, 5));
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 9;
        gbc.fill = GridBagConstraints.BOTH;
        medic_form.add(panel5, gbc);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridBagLayout());
        panel6.setPreferredSize(new Dimension(10, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.BOTH;
        medic_form.add(panel6, gbc);
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridBagLayout());
        panel7.setPreferredSize(new Dimension(10, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.BOTH;
        medic_form.add(panel7, gbc);
        rmv_button = new JButton();
        rmv_button.setText("Remover");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 8;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        medic_form.add(rmv_button, gbc);
        tip_label = new JLabel();
        tip_label.setText("Para remover: selecione o item e clique em remover");
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 11;
        gbc.anchor = GridBagConstraints.WEST;
        medic_form.add(tip_label, gbc);

        add_button.addActionListener(new AddEspecListener());
        rmv_button.addActionListener(new RvmEspecListener());
        add_med_button.addActionListener(new AddMedicListener());
        
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return medic_form;
    }

    class AddEspecListener implements ActionListener 
    {
        @Override
        public void actionPerformed(ActionEvent ev)
        {
            Object elem = espec_combo_box.getSelectedItem();
            for(int i = 0; i < d.size(); i++)
                if(d.get(i).equals(elem))
                {
                    JOptionPane.showMessageDialog(null, "Especialidade já adicionada!","Erro funcionários", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            d.addElement(espec_combo_box.getSelectedItem());
        }
    }

    class RvmEspecListener implements ActionListener 
    {
        @Override
        public void actionPerformed(ActionEvent ev)
        {
            d.removeElement(espec_list.getSelectedValue());
        }
    }

    class AddMedicListener implements ActionListener 
    {
        @Override
        public void actionPerformed(ActionEvent ev)
        {
            System.out.println(name + cpf + rg + adress + clt + da);
            System.out.println(tf_1.getText() + new String(pf_1.getPassword()));
            Object[] especs = new Object[d.size()];
                for(int i = 0; i < d.size(); i++)
                {
                    especs[i] = d.get(i);
                    System.out.println(especs[i]);
                }    
            String crm = crm_field.getText();
            System.out.println(crm);
            Medico m = new Medico(name, cpf, rg, adress, clt, da, crm, especs); 
            String pass = new String(pf_1.getPassword());
            System.out.println("user before: "+tf_1.getText().length() +"senha before:"+pass.length());
            
            /**
             * validando usario e senha
             */
            if(tf_1.getText().length() == 0)
            {
                JOptionPane.showMessageDialog(null,"Usuário em branco!","AVISO",JOptionPane.WARNING_MESSAGE);
                return;
            }
            if(pass.length() == 0)
            {
                JOptionPane.showMessageDialog(null,"Senha em branco!","AVISO",JOptionPane.WARNING_MESSAGE);
                return;
            }

            Usuario u = new Usuario(tf_1.getText(), pass);
            System.out.println("user: "+u.getUsuario() +"senha:"+u.getSenha());


            Object[] data = {u.getUsuario(), u.getSenha(), "Médico"};

            if(u.cadastraUsuario(m) != -1)  
            {
                JOptionPane.showMessageDialog(null, "Usuário "+ u.getUsuario() + " Já cadastrado!.");
                return;
            }
            Usuarios.addUsuario(u);
            g.users_model.addRow(data);
            g.users_table.clearSelection();
            g.users_model.fireTableDataChanged();
            clearFields();
        }
    }



}
