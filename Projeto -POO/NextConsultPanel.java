import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
 

import javax.swing.border.*;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Arrays;

public class NextConsultPanel 
{
    JPanel background;
    String medic;
    private JList consult_list;
    public JButton start_consult;
    private JPanel consult_panel;
    DefaultListModel d = new DefaultListModel();
    String data_day;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
        data_day = getDateTime();
    }

    public NextConsultPanel(JPanel cp)
    {
        this.background = cp;
    }

    public void setMedic(String m)
    {
        this.medic = m;
        createListModel();
    }

    private String getDateTime() 
    {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        return dateFormat.format(date);
    }

    public void createListModel()
    {
        System.out.println(data_day);
        System.out.println("medico logado(consultpanel):"+medic);
        ArrayList<Consulta> consultas_do_medico;
        Medico m  = (Medico) Usuarios.buscaMedico(medic);
            System.out.println("medicobuscado:"+m.getName());
        if(m != null)
        {
            consultas_do_medico = m.getConsultas();
            ArrayList<Consulta> tmp = new ArrayList<Consulta>();

            /**
             * Carrega as consultas do dia para o array tmp
             */
            for(int i = 0; i < consultas_do_medico.size(); i++)
            {
                System.out.printf("esse fdp tem consulta no bolso: %s\n", consultas_do_medico.get(i).getDataConsultaStr());

                if(consultas_do_medico.get(i).getDataConsultaStr().equals(data_day))
                {
                    System.out.println("add a data do dia");
                    tmp.add(consultas_do_medico.get(i));
                }
            }

            Object out[] = new Object[tmp.size()];
            for(int i = 0; i < tmp.size(); i++)
            {
                System.out.println("há consultas hoje");
                if(tmp.get(i).getIsConsulted() == true)
                    continue;

                String pacient = tmp.get(i).getPaciente();
                String horario = tmp.get(i).getDataEHoraStr();
                String str_final = String.format("Paciente:[%s], Horário:[%s]", pacient, horario);
                System.out.println(str_final);
                out[i] = str_final;    
                d.addElement(out[i]);          
            }
            
        }
    
        if(d.size() == 0)
            start_consult.setEnabled(false);
    }
    
    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        consult_panel = new JPanel();
        consult_panel.setLayout(new GridBagLayout());
        consult_panel.setBorder(BorderFactory.createTitledBorder(null, "Consultas do dia", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, -1, consult_panel.getFont()), new Color(-16777216)));
        final JScrollPane scrollPane1 = new JScrollPane();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        consult_panel.add(scrollPane1, gbc);
        consult_list = new JList(d);
        scrollPane1.setViewportView(consult_list);
        start_consult = new JButton();
        start_consult.setText("Iniciar");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        consult_panel.add(start_consult, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        consult_panel.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.BOTH;
        consult_panel.add(panel2, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("Próxima consulta");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        consult_panel.add(label1, gbc);

        start_consult.addActionListener(new ConsultListener());
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return consult_panel;
    }

    class ConsultListener implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent ev)
        {
            start_consult.setEnabled(false);
            int val = consult_list.getSelectedIndex();

            ConsultPanel cp = new ConsultPanel(background, start_consult, medic, d, val);
            background.add(cp.$$$getRootComponent$$$());
            background.revalidate();
            background.repaint();
        }
    }

    

}
